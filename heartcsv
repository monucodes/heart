import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
#warnings
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline

import pandas as pd
import numpy as np
df=pd.read_csv('heart.csv')

df.shape

df.info()

df.dtypes

# to know unique values
df.nunique()

# change the categorical type to categorical variables
df['sex'] = df['sex'].astype('object')
df['cp'] = df['cp'].astype('object')
df['fbs'] = df['fbs'].astype('object')
df['restecg'] = df['restecg'].astype('object')
df['exang'] = df['exang'].astype('object')
df['slope'] = df['slope'].astype('object')
df['ca'] = df['ca'].astype('object')
df['thal'] = df['thal'].astype('object')
df.dtypes

Error Correction

df['ca'].unique()

# to count the number in of each category decending order
df.ca.value_counts()

df[df['ca']==4]

df.loc[df['ca']==4,'ca']=np.NaN

df['ca'].unique()

df.thal.value_counts()

df.loc[df['thal']==0,'thal']=np.NaN

df[df['thal']==0]

df['thal'].unique()

df.isna().sum()

df = df.fillna(df.median())
df.isnull().sum()

duplicated=df.duplicated().sum()
if duplicated:
print("Duplicated rows :{}".format(duplicated))
else:
print("No duplicates")

duplicates=df[df.duplicated(keep=False)]

duplicates.head()

df.describe()

#Before we plot the outliers, let's change the labeling for better
visualization and interpretation.

df['target'] = df.target.replace({1: "Disease", 0: "No_disease"})
df['sex'] = df.sex.replace({1: "Male", 0: "Female"})
df['cp'] = df.cp.replace({0: "typical_angina",
1: "atypical_angina",
2:"non-anginal pain",
3: "asymtomatic"})
df['exang'] = df.exang.replace({1: "Yes", 0: "No"})
df['fbs'] = df.fbs.replace({1: "True", 0: "False"})
df['slope'] = df.slope.replace({0: "upsloping", 1: "flat",2:"downsloping"})
df['thal'] = df.thal.replace({1: "fixed_defect", 2: "reversable_defect"})

import matplotlib.pyplot as plt

import seaborn as sb
bxplt = sb.boxplot(df["target"],df["chol"])
plt.show()

sb.boxplot(x='target', y='oldpeak', data=df)

outliers(df[continous_features],drop=True)

from sklearn import preprocessing #encoding data
df=df.apply(preprocessing.LabelEncoder().fit_transform)

X = df.drop('target', axis=1) #dropping values
X.head()

X.shape

y = df['target']

y.head(10)

y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

print("X_train : ",X_train.shape)
print("X_test : ",X_test.shape)
print("y_train : ",y_train.shape)
print("y_test : ",y_test.shape)

from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
clf = DecisionTreeClassifier()
clf = clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print(y_pred)
